@page "/alumno"
@rendermode InteractiveServer

<PageTitle>Alta Materia</PageTitle>

<!-- Inscripcion Styles -->
<style>
    .container-inscripcion {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-direction: column;
        max-width: 800px;
        height: auto;
        margin: 0 auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

    .container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 100%;
        margin-bottom: 50px;
    }

    select {
        padding: 0.4rem 0.8rem;
    }

    .btn-inscripcion {
        width: 100%;
        padding: 0.7rem;
        background-color: #006bb7;
        border: none;
        border-radius: 4px;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    p {
        color: green;
    }
</style>

@if (idAlumnoLogueado == 0)
{
    <p>Acceso denegado</p>
} else
{
    @if (materias == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="container-inscripcion">
            <div class="container">
                <label for="materias">Elija una materia:</label>
                <select id="materias" @bind="idMateriaSeleccionada" @bind:after="OnMateriaSelected">
                    <option value="0">-- Seleccione una materia --</option>
                    @foreach (var materia in materias)
                    {
                        <option value="@materia.IdMateria">@materia.DescMateria</option>
                    }
                </select>
            </div>

            @if (idMateriaSeleccionada != 0 && cursosDeMateria != null)
            {
                <div class="container">
                    <label for="cursos">Elija un curso:</label>
                    <select id="cursos" @bind="idCursoSeleccionado">
                        <option value="0">-- Seleccione un curso --</option>
                        @foreach (var curso in cursosDeMateria)
                        {
                            <option value="@curso.IdCurso">
                                ID Curso: @curso.IdCurso - Comisión: @curso.IdComisionNavigation.DescComision
                            </option>
                        }
                    </select>
                </div>
            }

            @if (inscripcionRealizada)
            {
                <p>Inscripción realizada con éxito.</p>
            }

            <button type="submit" class="btn-inscripcion" @onclick="InscribirAlumno">Inscribirse</button>

        </div>
    }
}


@inject Blazor.Services.ConnectionService ClientService

@code {
    private clientSwagger.clientSwagger client;

    private int idAlumnoLogueado;

    private ICollection<clientSwagger.Materia> materias;
    private ICollection<clientSwagger.Curso> cursosDeMateria;
    private IDictionary<string, string>? currentUser;
    private int idMateriaSeleccionada;
    private int idCursoSeleccionado;
    private bool inscripcionRealizada = false;

    protected override async Task OnInitializedAsync() {
        client = ClientService.Client();

        currentUser = ClientService.GetCurrentUser();

        if (currentUser == null)
        {
            idAlumnoLogueado = 0;
        }
        else if (currentUser["TipoPersona"] != "Alumno")
        {
            idAlumnoLogueado = 0;
        }
        else
        {
            idAlumnoLogueado = int.Parse(currentUser["IdPersona"]);
            materias = await client.Get_MateriasAsync();
        }

        
    }

    private async Task OnMateriaSelected() {
        // Mostrar id materia seleccionada por consola
        Console.WriteLine(idMateriaSeleccionada);
        cursosDeMateria = await client.Get_Cursos_By_MateriaAsync(idMateriaSeleccionada);
        // Mostrar lista de cursos por consola
        Console.WriteLine(cursosDeMateria);
    }

    private async Task InscribirAlumno() {
        Console.WriteLine($"ID Alumno: {idAlumnoLogueado} - ID Curso: {idCursoSeleccionado}");
        if (idCursoSeleccionado != 0) {
            var inscripcion = new clientSwagger.AlumnosInscripcione {
                    IdAlumno = idAlumnoLogueado,
                    IdCurso = idCursoSeleccionado,
                    Condicion = "Cursando"
                };

            try {
                await client.Add_Alumno_InscripcionAsync(inscripcion);
                Console.WriteLine("Inscripción realizada con éxito.");
            } catch (clientSwagger.ApiException ex) when (ex.StatusCode == 201) {
                Console.WriteLine("Inscripción realizada con éxito.");
                inscripcionRealizada = true;
            } catch (Exception ex) {
                Console.WriteLine($"Error al inscribir al alumno: {ex.Message}");
                inscripcionRealizada = false;
            }
        } else {
            Console.WriteLine("Seleccione una materia y una comisión para continuar.");
        }
    }
}

