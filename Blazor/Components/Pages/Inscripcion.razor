@page "/alta-materia"
@rendermode InteractiveServer

<PageTitle>Alta Materia</PageTitle>

@if (materias == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <label for="materias">Elija una materia:</label>
    <select id="materias" @bind="idMateriaSeleccionada" @bind:after="OnMateriaSelected">
        <option value="0">-- Seleccione una materia --</option>
        @foreach (var materia in materias)
        {
            <option value="@materia.IdMateria">@materia.DescMateria</option>
        }
    </select>

    @if (idMateriaSeleccionada != 0 && cursosDeMateria != null)
    {
        <label for="comisiones">Elija una comisión:</label>
        <select id="comisiones" @bind="idComisionSeleccionada" @bind:after="MostrarComsion">
            <option value="0">-- Seleccione una comisión --</option>
            @foreach (var curso in cursosDeMateria)
            {
                <option value="@curso.IdComision">
                    @curso.IdComisionNavigation.DescComision
                </option>
            }
        </select>
    }



    <button>Inscribirse</button>
}


@code {
    private clientSwagger.clientSwagger client = new clientSwagger.clientSwagger("https://localhost:7039/", new HttpClient());
    private int alumnoLogueadoId = 6;

    private ICollection<clientSwagger.Materia> materias;
    private ICollection<clientSwagger.Curso> cursosDeMateria;

    private int idMateriaSeleccionada;
    private int idComisionSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        materias = await client.Get_MateriasAsync();
    }

    private async Task OnMateriaSelected()
    {
        // Mostrar id materia seleccionada por consola
        Console.WriteLine(idMateriaSeleccionada);
        cursosDeMateria = await client.Get_Cursos_By_MateriaAsync(idMateriaSeleccionada);
        // Mostrar lista de cursos por consola
        Console.WriteLine(cursosDeMateria);
    }

    private async Task MostrarComsion()
    {
        // Mostrar materia y comision seleccionadas
        Console.WriteLine($"ID Materia: {idMateriaSeleccionada}, ID Comision: {idComisionSeleccionada}");
    }
    private async Task InscribirAlumno() // Metodo para validar los datos que voy a cargar en la inscripcion (Borrar)
    {
        Console.WriteLine($"ID Alumno: {alumnoLogueadoId} - ID Curso: {idComisionSeleccionada}");
    }


}


@*     private async Task InscribirAlumno()
    {
        if (comisionSeleccionadaId.HasValue)
        {
            var inscripcion = new clientSwagger.AlumnosInscripcione
                {
                    IdAlumno = alumnoLogueadoId,
                    IdCurso = comisionSeleccionadaId.Value,
                    Condicion = "Inscripto",
                    Nota = null
                };

            await client.Add_Alumno_InscripcionAsync(inscripcion);
            Console.WriteLine("Inscripción realizada con éxito.");
        }
        else
        {
            Console.WriteLine("Seleccione una materia y una comisión para continuar.");
        }
    } *@

